(function(window, $) {
    'use strict';

    var mapaCaracteresAcentuados = [
        {'base':'A', 'letras':/[\u0041\u24B6\uFF21\u00C0\u00C1\u00C2\u1EA6\u1EA4\u1EAA\u1EA8\u00C3\u0100\u0102\u1EB0\u1EAE\u1EB4\u1EB2\u0226\u01E0\u00C4\u01DE\u1EA2\u00C5\u01FA\u01CD\u0200\u0202\u1EA0\u1EAC\u1EB6\u1E00\u0104\u023A\u2C6F]/g},
        {'base':'AA','letras':/[\uA732]/g},
        {'base':'AE','letras':/[\u00C6\u01FC\u01E2]/g},
        {'base':'AO','letras':/[\uA734]/g},
        {'base':'AU','letras':/[\uA736]/g},
        {'base':'AV','letras':/[\uA738\uA73A]/g},
        {'base':'AY','letras':/[\uA73C]/g},
        {'base':'B', 'letras':/[\u0042\u24B7\uFF22\u1E02\u1E04\u1E06\u0243\u0182\u0181]/g},
        {'base':'C', 'letras':/[\u0043\u24B8\uFF23\u0106\u0108\u010A\u010C\u00C7\u1E08\u0187\u023B\uA73E]/g},
        {'base':'D', 'letras':/[\u0044\u24B9\uFF24\u1E0A\u010E\u1E0C\u1E10\u1E12\u1E0E\u0110\u018B\u018A\u0189\uA779]/g},
        {'base':'DZ','letras':/[\u01F1\u01C4]/g},
        {'base':'Dz','letras':/[\u01F2\u01C5]/g},
        {'base':'E', 'letras':/[\u0045\u24BA\uFF25\u00C8\u00C9\u00CA\u1EC0\u1EBE\u1EC4\u1EC2\u1EBC\u0112\u1E14\u1E16\u0114\u0116\u00CB\u1EBA\u011A\u0204\u0206\u1EB8\u1EC6\u0228\u1E1C\u0118\u1E18\u1E1A\u0190\u018E]/g},
        {'base':'F', 'letras':/[\u0046\u24BB\uFF26\u1E1E\u0191\uA77B]/g},
        {'base':'G', 'letras':/[\u0047\u24BC\uFF27\u01F4\u011C\u1E20\u011E\u0120\u01E6\u0122\u01E4\u0193\uA7A0\uA77D\uA77E]/g},
        {'base':'H', 'letras':/[\u0048\u24BD\uFF28\u0124\u1E22\u1E26\u021E\u1E24\u1E28\u1E2A\u0126\u2C67\u2C75\uA78D]/g},
        {'base':'I', 'letras':/[\u0049\u24BE\uFF29\u00CC\u00CD\u00CE\u0128\u012A\u012C\u0130\u00CF\u1E2E\u1EC8\u01CF\u0208\u020A\u1ECA\u012E\u1E2C\u0197]/g},
        {'base':'J', 'letras':/[\u004A\u24BF\uFF2A\u0134\u0248]/g},
        {'base':'K', 'letras':/[\u004B\u24C0\uFF2B\u1E30\u01E8\u1E32\u0136\u1E34\u0198\u2C69\uA740\uA742\uA744\uA7A2]/g},
        {'base':'L', 'letras':/[\u004C\u24C1\uFF2C\u013F\u0139\u013D\u1E36\u1E38\u013B\u1E3C\u1E3A\u0141\u023D\u2C62\u2C60\uA748\uA746\uA780]/g},
        {'base':'LJ','letras':/[\u01C7]/g},
        {'base':'Lj','letras':/[\u01C8]/g},
        {'base':'M', 'letras':/[\u004D\u24C2\uFF2D\u1E3E\u1E40\u1E42\u2C6E\u019C]/g},
        {'base':'N', 'letras':/[\u004E\u24C3\uFF2E\u01F8\u0143\u00D1\u1E44\u0147\u1E46\u0145\u1E4A\u1E48\u0220\u019D\uA790\uA7A4]/g},
        {'base':'NJ','letras':/[\u01CA]/g},
        {'base':'Nj','letras':/[\u01CB]/g},
        {'base':'O', 'letras':/[\u004F\u24C4\uFF2F\u00D2\u00D3\u00D4\u1ED2\u1ED0\u1ED6\u1ED4\u00D5\u1E4C\u022C\u1E4E\u014C\u1E50\u1E52\u014E\u022E\u0230\u00D6\u022A\u1ECE\u0150\u01D1\u020C\u020E\u01A0\u1EDC\u1EDA\u1EE0\u1EDE\u1EE2\u1ECC\u1ED8\u01EA\u01EC\u00D8\u01FE\u0186\u019F\uA74A\uA74C]/g},
        {'base':'OI','letras':/[\u01A2]/g},
        {'base':'OO','letras':/[\uA74E]/g},
        {'base':'OU','letras':/[\u0222]/g},
        {'base':'P', 'letras':/[\u0050\u24C5\uFF30\u1E54\u1E56\u01A4\u2C63\uA750\uA752\uA754]/g},
        {'base':'Q', 'letras':/[\u0051\u24C6\uFF31\uA756\uA758\u024A]/g},
        {'base':'R', 'letras':/[\u0052\u24C7\uFF32\u0154\u1E58\u0158\u0210\u0212\u1E5A\u1E5C\u0156\u1E5E\u024C\u2C64\uA75A\uA7A6\uA782]/g},
        {'base':'S', 'letras':/[\u0053\u24C8\uFF33\u1E9E\u015A\u1E64\u015C\u1E60\u0160\u1E66\u1E62\u1E68\u0218\u015E\u2C7E\uA7A8\uA784]/g},
        {'base':'T', 'letras':/[\u0054\u24C9\uFF34\u1E6A\u0164\u1E6C\u021A\u0162\u1E70\u1E6E\u0166\u01AC\u01AE\u023E\uA786]/g},
        {'base':'TZ','letras':/[\uA728]/g},
        {'base':'U', 'letras':/[\u0055\u24CA\uFF35\u00D9\u00DA\u00DB\u0168\u1E78\u016A\u1E7A\u016C\u00DC\u01DB\u01D7\u01D5\u01D9\u1EE6\u016E\u0170\u01D3\u0214\u0216\u01AF\u1EEA\u1EE8\u1EEE\u1EEC\u1EF0\u1EE4\u1E72\u0172\u1E76\u1E74\u0244]/g},
        {'base':'V', 'letras':/[\u0056\u24CB\uFF36\u1E7C\u1E7E\u01B2\uA75E\u0245]/g},
        {'base':'VY','letras':/[\uA760]/g},
        {'base':'W', 'letras':/[\u0057\u24CC\uFF37\u1E80\u1E82\u0174\u1E86\u1E84\u1E88\u2C72]/g},
        {'base':'X', 'letras':/[\u0058\u24CD\uFF38\u1E8A\u1E8C]/g},
        {'base':'Y', 'letras':/[\u0059\u24CE\uFF39\u1EF2\u00DD\u0176\u1EF8\u0232\u1E8E\u0178\u1EF6\u1EF4\u01B3\u024E\u1EFE]/g},
        {'base':'Z', 'letras':/[\u005A\u24CF\uFF3A\u0179\u1E90\u017B\u017D\u1E92\u1E94\u01B5\u0224\u2C7F\u2C6B\uA762]/g},
        {'base':'a', 'letras':/[\u0061\u24D0\uFF41\u1E9A\u00E0\u00E1\u00E2\u1EA7\u1EA5\u1EAB\u1EA9\u00E3\u0101\u0103\u1EB1\u1EAF\u1EB5\u1EB3\u0227\u01E1\u00E4\u01DF\u1EA3\u00E5\u01FB\u01CE\u0201\u0203\u1EA1\u1EAD\u1EB7\u1E01\u0105\u2C65\u0250]/g},
        {'base':'aa','letras':/[\uA733]/g},
        {'base':'ae','letras':/[\u00E6\u01FD\u01E3]/g},
        {'base':'ao','letras':/[\uA735]/g},
        {'base':'au','letras':/[\uA737]/g},
        {'base':'av','letras':/[\uA739\uA73B]/g},
        {'base':'ay','letras':/[\uA73D]/g},
        {'base':'b', 'letras':/[\u0062\u24D1\uFF42\u1E03\u1E05\u1E07\u0180\u0183\u0253]/g},
        {'base':'c', 'letras':/[\u0063\u24D2\uFF43\u0107\u0109\u010B\u010D\u00E7\u1E09\u0188\u023C\uA73F\u2184]/g},
        {'base':'d', 'letras':/[\u0064\u24D3\uFF44\u1E0B\u010F\u1E0D\u1E11\u1E13\u1E0F\u0111\u018C\u0256\u0257\uA77A]/g},
        {'base':'dz','letras':/[\u01F3\u01C6]/g},
        {'base':'e', 'letras':/[\u0065\u24D4\uFF45\u00E8\u00E9\u00EA\u1EC1\u1EBF\u1EC5\u1EC3\u1EBD\u0113\u1E15\u1E17\u0115\u0117\u00EB\u1EBB\u011B\u0205\u0207\u1EB9\u1EC7\u0229\u1E1D\u0119\u1E19\u1E1B\u0247\u025B\u01DD]/g},
        {'base':'f', 'letras':/[\u0066\u24D5\uFF46\u1E1F\u0192\uA77C]/g},
        {'base':'g', 'letras':/[\u0067\u24D6\uFF47\u01F5\u011D\u1E21\u011F\u0121\u01E7\u0123\u01E5\u0260\uA7A1\u1D79\uA77F]/g},
        {'base':'h', 'letras':/[\u0068\u24D7\uFF48\u0125\u1E23\u1E27\u021F\u1E25\u1E29\u1E2B\u1E96\u0127\u2C68\u2C76\u0265]/g},
        {'base':'hv','letras':/[\u0195]/g},
        {'base':'i', 'letras':/[\u0069\u24D8\uFF49\u00EC\u00ED\u00EE\u0129\u012B\u012D\u00EF\u1E2F\u1EC9\u01D0\u0209\u020B\u1ECB\u012F\u1E2D\u0268\u0131]/g},
        {'base':'j', 'letras':/[\u006A\u24D9\uFF4A\u0135\u01F0\u0249]/g},
        {'base':'k', 'letras':/[\u006B\u24DA\uFF4B\u1E31\u01E9\u1E33\u0137\u1E35\u0199\u2C6A\uA741\uA743\uA745\uA7A3]/g},
        {'base':'l', 'letras':/[\u006C\u24DB\uFF4C\u0140\u013A\u013E\u1E37\u1E39\u013C\u1E3D\u1E3B\u017F\u0142\u019A\u026B\u2C61\uA749\uA781\uA747]/g},
        {'base':'lj','letras':/[\u01C9]/g},
        {'base':'m', 'letras':/[\u006D\u24DC\uFF4D\u1E3F\u1E41\u1E43\u0271\u026F]/g},
        {'base':'n', 'letras':/[\u006E\u24DD\uFF4E\u01F9\u0144\u00F1\u1E45\u0148\u1E47\u0146\u1E4B\u1E49\u019E\u0272\u0149\uA791\uA7A5]/g},
        {'base':'nj','letras':/[\u01CC]/g},
        {'base':'o', 'letras':/[\u006F\u24DE\uFF4F\u00F2\u00F3\u00F4\u1ED3\u1ED1\u1ED7\u1ED5\u00F5\u1E4D\u022D\u1E4F\u014D\u1E51\u1E53\u014F\u022F\u0231\u00F6\u022B\u1ECF\u0151\u01D2\u020D\u020F\u01A1\u1EDD\u1EDB\u1EE1\u1EDF\u1EE3\u1ECD\u1ED9\u01EB\u01ED\u00F8\u01FF\u0254\uA74B\uA74D\u0275]/g},
        {'base':'oi','letras':/[\u01A3]/g},
        {'base':'ou','letras':/[\u0223]/g},
        {'base':'oo','letras':/[\uA74F]/g},
        {'base':'p','letras':/[\u0070\u24DF\uFF50\u1E55\u1E57\u01A5\u1D7D\uA751\uA753\uA755]/g},
        {'base':'q','letras':/[\u0071\u24E0\uFF51\u024B\uA757\uA759]/g},
        {'base':'r','letras':/[\u0072\u24E1\uFF52\u0155\u1E59\u0159\u0211\u0213\u1E5B\u1E5D\u0157\u1E5F\u024D\u027D\uA75B\uA7A7\uA783]/g},
        {'base':'s','letras':/[\u0073\u24E2\uFF53\u00DF\u015B\u1E65\u015D\u1E61\u0161\u1E67\u1E63\u1E69\u0219\u015F\u023F\uA7A9\uA785\u1E9B]/g},
        {'base':'t','letras':/[\u0074\u24E3\uFF54\u1E6B\u1E97\u0165\u1E6D\u021B\u0163\u1E71\u1E6F\u0167\u01AD\u0288\u2C66\uA787]/g},
        {'base':'tz','letras':/[\uA729]/g},
        {'base':'u','letras':/[\u0075\u24E4\uFF55\u00F9\u00FA\u00FB\u0169\u1E79\u016B\u1E7B\u016D\u00FC\u01DC\u01D8\u01D6\u01DA\u1EE7\u016F\u0171\u01D4\u0215\u0217\u01B0\u1EEB\u1EE9\u1EEF\u1EED\u1EF1\u1EE5\u1E73\u0173\u1E77\u1E75\u0289]/g},
        {'base':'v','letras':/[\u0076\u24E5\uFF56\u1E7D\u1E7F\u028B\uA75F\u028C]/g},
        {'base':'vy','letras':/[\uA761]/g},
        {'base':'w','letras':/[\u0077\u24E6\uFF57\u1E81\u1E83\u0175\u1E87\u1E85\u1E98\u1E89\u2C73]/g},
        {'base':'x','letras':/[\u0078\u24E7\uFF58\u1E8B\u1E8D]/g},
        {'base':'y','letras':/[\u0079\u24E8\uFF59\u1EF3\u00FD\u0177\u1EF9\u0233\u1E8F\u00FF\u1EF7\u1E99\u1EF5\u01B4\u024F\u1EFF]/g},
        {'base':'z','letras':/[\u007A\u24E9\uFF5A\u017A\u1E91\u017C\u017E\u1E93\u1E95\u01B6\u0225\u0240\u2C6C\uA763]/g}
    ];
    
    function classReg(className) {
      return new RegExp("(^|\\s+)" + className + "(\\s+|$)");
    }

    var hasClass, addClass, removeClass;

    if ('classList' in document.documentElement) {
      hasClass = function(elem, c) {
        return elem.classList.contains(c);
      };
      addClass = function(elem, c) {
        elem.classList.add(c);
      };
      removeClass = function(elem, c) {
        elem.classList.remove(c);
      };
    }
    else {
      hasClass = function(elem, c) {
        return classReg(c).test(elem.className);
      };
      addClass = function(elem, c) {
        if (!hasClass(elem, c)) {
          elem.className = elem.className + ' ' + c;
        }
      };
      removeClass = function(elem, c) {
        elem.className = elem.className.replace(classReg(c), ' ');
      };
    }

    function toggleClass(elem, c) {
      var fn = hasClass(elem, c) ? removeClass : addClass;
      fn(elem, c);
    }

    var classie = {
      // full names
      hasClass: hasClass,
      addClass: addClass,
      removeClass: removeClass,
      toggleClass: toggleClass,
      // short names
      has: hasClass,
      add: addClass,
      remove: removeClass,
      toggle: toggleClass
    };

    if (typeof define === 'function' && define.amd) {
      define(classie);
    } else {
      window.classie = classie;
    }
	
	/**
	 * Define a heranca entre classe A e a classe B
	 * 
	 * @param {Object} a
	 * @param {Object} b
	 * @returns {Object}
	 */
	function extend(a, b) {
		for(var key in b) {
			if(b.hasOwnProperty(key)) {
				a[key] = b[key];
			}
		}
		return a;
	}
	
	/**
	 * Checa se o elemento tem um pai
	 * @param {Object} e
	 * @param {string} id
	 * @returns {Boolean}
	 */
	function temPai(e, id) {
		if (!e) return false;
		var el = e.target||e.srcElement||e||false;
		while (el && el.id != id) {
			el = el.parentNode||false;
		}
		return (el!==false);
	};
	
	/**
	 * Checa o nivel de profundidade ate o ponto de parada predefinido
	 * @param {Object} e
	 * @param {string} id
	 * @param {string} pontoDeParada
	 * @param {number} nivel
	 * @returns {Number}
	 */
	function nivelProfundidade(e, id, pontoDeParada, nivel) {
		nivel = nivel || 0;
		if (e.id.indexOf(id) >= 0) return nivel;
		if(classie.has(e, pontoDeParada)) {
			++nivel;
		}
		return e.parentNode && nivelProfundidade(e.parentNode, id, pontoDeParada, nivel);
	};
	
	/**
	 * Checa se a aplicacao esta sendo executada via mobile
	 * @returns {Boolean}
	 */
	function checarMobile() {
		var check = false;
		(function(a){if(/(android|ipad|playbook|silk|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|netfront|opera m(ob|in)i|palm(os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows (ce|phone)|xda|xiino/i.test(a)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s)|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp(i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac(|\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt(|\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg(g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v)|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v)|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-|)|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(a.substr(0,4)))check = true})(navigator.userAgent||navigator.vendor||window.opera);
		return check;
	};
	
	/**
	 * Checa qual o elemento mais proximo com a classe especificada
	 * @param {Object} e
	 * @param {string} classname
	 * @returns {Boolean}
	 */
	function maisProximo(e, classname) {
		if(classie.has(e, classname)) {
			return e;
		}
		return e.parentNode && maisProximo(e.parentNode, classname);
	};

	/**
	 * Classe de atribuicao de eventos de navegacao do menu
	 * 
	 * @param {Object} $menu
	 * @param {Object} $botao
	 */
	function menuNavegacao($menu, $botao) {
		this.el = $menu;
		this.botao = $botao;
		this.opcoes = {
			tipoEfeito : 'cover',
			espacamento : 40,
			classeVoltar : 'btn-voltar'
		};

		this.suportaAnimacao = Modernizr.csstransforms3d;
		if(this.suportaAnimacao) {
			this._init();
		}
	};
	
	/**
	 * @override
	 */
	menuNavegacao.prototype = {
		/**
		 * @constructor
		 */
		_init : function() {
			var self = this;
			this.aberto = false;
			this.level = 0;
			this.wrapper = document.getElementsByClassName('content')[0];
			this.campoBusca = document.querySelector('.menu-busca input');
			this.menuItems = Array.prototype.slice.call(this.el.querySelectorAll('li'));
			this.nivelAnterior = Array.prototype.slice.call(this.el.querySelectorAll('.' + this.opcoes.classeVoltar));
			this.tipoEvento = checarMobile() ? 'touchstart' : 'click';
			this.niveis = Array.prototype.slice.call(this.el.querySelectorAll('div.nivel'));
			
			this.niveis.forEach(function(el, i) { 
				el.setAttribute('data-level', nivelProfundidade(el, self.el.id, 'nivel')); 
			});
			
			classie.add(this.el, this.opcoes.tipoEfeito);

			this.carregar();
		},
		
		/**
		 * Atribui os eventos ao clicar nos botoes abrir menu, voltar e itens de menu
		 */
		carregar : function() {
			var self = this;
			
			/**
			 * Fecha o menu ao clicar do lado de fora
			 * @param {Object} el 
			 */
			var recolheMenu = function(el) {
				self.fecharMenu();
				el.removeEventListener(self.tipoEvento, recolheMenu);
				self.campoBusca.value = '';
				document.querySelector('.menu-busca .resultado-busca > ul.lista').innerHTML = '';
			};

			// Alterna exibicao do menu
			if (this.botao != null ) {
				this.botao.addEventListener(this.tipoEvento, function(ev) {
					ev.stopPropagation();
					ev.preventDefault();
					
					if(self.aberto) {
						self.fecharMenu();
					} else {
						self.abrirMenu();
						//Coloca o campo de busca em foco
						self.campoBusca.focus();
						
						// Recolhe o menu ao clicar em qualquer outro lugar da tela
						document.addEventListener(self.tipoEvento, function(ev) {
							if(self.podeSerFechado(ev)) {
								recolheMenu(this);
							}
						});
					}
				});
			}
			
			/**
			 * Verifica se o menu pode ser fechado
			 * @param {event} ev
			 */
			this.podeSerFechado = function(ev){
				return self.aberto && !temPai(ev.target, self.el.id) && ev.target != self.campoBusca;
			};

			// abrindo um submenu
			this.menuItems.forEach(function(item, i) {
				// verifica se tem um submenu
				var subnivel = item.querySelector('div.nivel');
				if(subnivel){
					item.querySelector('a').addEventListener(self.tipoEvento, function(ev) {
						ev.preventDefault();
						var level = maisProximo(item, 'nivel').getAttribute('data-level');
						var menuRaiz = document.querySelector('.nivel[data-level="1"]');
						
						if(self.level <= level) {
							ev.stopPropagation();
							classie.add(maisProximo(item, 'nivel'), 'nivel-overlay');
							menuRaiz.scrollTop = 0;
							self.abrirMenu(subnivel);
						}
					});
				}
			});

			// fechando os subniveis:
			// checando a parte visivel
			this.niveis.forEach(function(el, i) {
				el.addEventListener(self.tipoEvento, function(ev) {
					ev.stopPropagation();
					var level = el.getAttribute('data-level');
					if(self.level > level) {
						self.level = level;
						self.fecharSubmenus();
					}
				});
			});

			// Ao clicar em um elemento especifico
			this.nivelAnterior.forEach(function(el, i) {
				el.addEventListener(self.tipoEvento, function(ev) {
					ev.preventDefault();
					var level = maisProximo(el, 'nivel').getAttribute('data-level');
					if(self.level <= level) {
						ev.stopPropagation();
						self.level = maisProximo(el, 'nivel').getAttribute('data-level') - 1;
						self.level === 0 ? self.fecharMenu(): self.fecharSubmenus();
					}
				});
			});
		},
		
		/**
		 * Abre o menu e|ou submenu
		 * @param {Object} subnivel
		 */
		abrirMenu : function(subnivel) {
			// Incrementa o nivel de profundidade
			++this.level;

			// Arrasta o box principal
			var recuo = (this.level - 1) * this.opcoes.espacamento;
			var	translateVal = this.opcoes.tipoEfeito === 'overlap' ? this.el.offsetWidth + recuo : this.el.offsetWidth;

			this.transformar('translate3d(' + translateVal + 'px,0,0)');

			if(subnivel) {
				// Reseta o subnivel
				this.transformar('', subnivel);

				for(var i = 0, len = this.niveis.length; i < len; ++i) {
					var nivel = this.niveis[i];
					if(nivel != subnivel && !classie.has(nivel, 'nivel-aberto')) {
						this.transformar('translate3d(-100%,0,0) translate3d(' + -1*recuo + 'px,0,0)', nivel);
					}
				}
			}

			// Adiciona classe empurrar ao abrir o primeiro nivel do menu
			if(this.level === 1) {
				classie.add(this.wrapper, 'empurrar');
				this.aberto = true;
			}
			// Aciciona a classe nivel-aberto ao abrir menu
			classie.add(subnivel || this.niveis[0], 'nivel-aberto');
			classie.add(this.botao, 'active');
		},
		
		/**
		 * Fecha o menu
		 */
		fecharMenu : function() {
			this.transformar('translate3d(0,0,0)');
			this.level = 0;
			classie.remove(this.wrapper, 'empurrar');
			classie.remove(this.botao, 'active');
			this.alternarNiveis();
			this.aberto = false;
		},
		
		/**
		 * Fecha submenus
		 */
		fecharSubmenus : function() {
			var translateVal = this.opcoes.tipoEfeito === 'overlap' ? this.el.offsetWidth + (this.level - 1) * this.opcoes.espacamento : this.el.offsetWidth;
			this.transformar('translate3d(' + translateVal + 'px,0,0)');
			this.alternarNiveis();
		},
		
		/**
		 * Aplica efeito CSS de arrastar menus
		 * @param {string} val
		 * @param {Object} el
		 */
		transformar : function(val, el) {
			el = el || this.wrapper;
			el.style.WebkitTransform = val;
			el.style.MozTransform = val;
			el.style.transform = val;
		},
		
		/**
		 *	Remove as classes de nivel-aberto de menus fechados 
		 */
		alternarNiveis : function() {
			for(var i = 0, len = this.niveis.length; i < len; ++i) {
				var nivel = this.niveis[i];
				if(nivel.getAttribute('data-level') >= this.level + 1) {
					classie.remove(nivel, 'nivel-aberto');
					classie.remove(nivel, 'nivel-overlay');
				}
				else if(Number(nivel.getAttribute('data-level')) == this.level) {
					classie.remove(nivel, 'nivel-overlay');
				}
			}
		}
	};

	var menus = window.menusJSON || {};
	const CIMA = 40;
    const BAIXO = 38;
    const DIREITA = 39;
    const ESQUERDA = 37;
    const TAB = 9;
    const ESC = 27;
    const SEPARADOR = ' &middot; ';
	
	/**
	 * Classe de pesquisa de menus
	 */
	function Pesquisa(menus){
	  var self = this;
	  var menus = menus || {};
	  var inputBusca = document.querySelector('.menu-busca input.form-control');
	  var autocomplete = document.querySelector('.menu-busca .resultado-busca > ul.lista');
	  const LIMITE_BUSCA = 3;
	  self.resultados = [];
	  
	  /**
	   * Dispara o evento de busca ao digitar mais de 3 caracteres
	   * @param {event} e
	   */
	  this.buscar = function(e){
	    var termo = inputBusca.value || '';

	    if(self.podeSerBuscado(termo, e)){
		    self.resultados = [];
		    termo = self.removerAcentos(termo.toLowerCase());
		    self.procurarTermo(menus, termo);
		    self.exibirResultados();
	    }else{
	    	self.selecionarResultado(e);
	    }
	    
	    document.addEventListener('keydown', self.fechar);
	  };
	  
	  /**
	   * Checa se o comprimento do termo esta de acordo com o LIMTE_BUSCA 
	   * e nenhuma tecla de selecao foi pressionada 
	   * @param {string} termo
	   * @param {event} e
	   * @returns {Boolean}
	   */
	  this.podeSerBuscado = function(termo, e){
		  var teclaSelecao = [CIMA, BAIXO, DIREITA, ESQUERDA, TAB];
		  
		  return termo.length >= LIMITE_BUSCA && teclaSelecao.indexOf(e.keyCode) == -1;
	  };
	  
	  /**
	   * Procura todos os itens de menu que contenham o termo procurado
	   * @param {Object[]} menusLista
	   * @param {string} termo
	   * @param {string} prefixo
	   */
	  this.procurarTermo = function(menusLista, termo, prefixo){
	    var prefixo = prefixo || '';
	    var prefixoAnterior = '';

	    menusLista.forEach(function(menu){
	      if(self.temFilhos(menu)){
	        prefixoAnterior = prefixo;
	        prefixo = prefixo + menu.nome + SEPARADOR;
	        self.procurarTermo(menu.itens, termo, prefixo);
	        prefixo = prefixoAnterior;
	      }

	      var titulo = self.removerAcentos(menu.nome.toLowerCase());
	      termo = self.removerAcentos(termo);
	      
	      if(titulo.search(termo) != -1){
	        self.adicionarMenuComLink(prefixo, menu);
	      }
	    });
	  };

	  /**
	   * Adiciona menus e submenus com link que contem o termo procurado
	   * @param {string} prefixo
	   * @param {Object} menu
	   */
	  this.adicionarMenuComLink = function(prefixo, menu){
	    if(menu.url != '#'){
	    	self.resultados.push({nome: prefixo + '<b>'+menu.nome+'</b>', url: menu.url});
	    }else{
	    	self.adicionarSubmenus(prefixo + '<b>'+menu.nome+'</b>', menu);
	    }
	  };
	  
	  /**
	   * Adiciona todos os submenus de um menu equivalente ao termo procurado
	   * @param {string} prefixo
	   * @param {Object} menu
	   */
	  this.adicionarSubmenus = function(prefixo, menu){
		var prefixoInterno = prefixo; 
		var prefixoAnterior = '';
		
	    if(self.temFilhos(menu)){
	    	menu.itens.forEach(function(menu){
	    		prefixoAnterior = prefixoInterno;
	    		prefixoInterno = prefixoInterno + SEPARADOR + menu.nome;
	    		self.adicionarSubmenus(prefixoInterno, menu);
	    		prefixoInterno = prefixoAnterior;
	    	});
	    }
	    
	    if(menu.url != '#'){
	    	self.resultados.push({nome: prefixoInterno, url: menu.url});
	    }
	  };
	  
	  /**
	   * Verifica se o item de menu tem submenus
	   * @param {Object[]} menu
	   * @returns {Boolean}
	   */
	  this.temFilhos = function(menu){
	    return (menu['itens'] && menu.itens.length > 0);
	  };
	  
	  /**
	   * Remove acentos de uma string
	   * @param {string} termo
	   */
	  this.removerAcentos = function(termo){
		  for(var i=0; i<mapaCaracteresAcentuados.length; i++) {
			  termo = termo.replace(mapaCaracteresAcentuados[i].letras, mapaCaracteresAcentuados[i].base);
		  }

          return termo;
	  };
	  
	  /**
	   * Limpa e exibe lisgatem de resultados encontrados
	   */
	  this.exibirResultados = function(){
	    autocomplete.innerHTML = self.criarLista();
	  };
	  
	  /**
	   * Gera o html da listagem de resultados
	   * @returns {string}
	   */
	  this.criarLista = function(){
	    var html = '';
	    self.resultados.forEach(function(menu){
	      html += '<li><a href="'+menu.url+'">'+menu.nome+'</a></li>';
	    });
	    return html;
	  };
	  
	  /**
	   * Fecha a tela de busca ao clicar em fechar ou pressionar a tecla ESC
	   * @param {event} e
	   */
	  this.fechar = function(e){
		  var fechado = (e.type == 'click' || e.keyCode == ESC);
		  if(fechado){
			  var botaoSidebar = document.getElementsByClassName('botao-menu')[0];
			  botaoSidebar.click();
			  inputBusca.value = '';
			  self.ocultarResultados();
			  document.removeEventListener('keydown', self.fechar);
		  };
	  };
	  
	  /**
	   * Limpa os resultados apresentados
	   */
	  this.ocultarResultados = function(){
	    autocomplete.innerHTML = '';
	  };
	  
	  /**
	   * Seleciona um resultado ao pressionar teclas (cima, baixo, esquerda, direita)
	   * @param {event} e
	   */
	  this.selecionarResultado = function(e){
		  if(!self.podeSerSelecionado()){
			  return false;
		  };
		  
		  var irProximo = [CIMA, DIREITA];
		  var irAnterior = [BAIXO, ESQUERDA];
		  var selecionado = document.querySelector('.menu-busca .resultado-busca > ul > li > a:focus') || autocomplete.lastChild.firstChild || undefined;
	
		  if(irProximo.indexOf(e.keyCode) != -1){
		        try{
		          selecionado = selecionado.parentElement.nextSibling.firstElementChild;
		        }catch(err){
		          selecionado = document.querySelector('.menu-busca .resultado-busca > ul li:first-child > a');
		        }
		        selecionado.focus();
		  }
	
		  if(irAnterior.indexOf(e.keyCode) != -1){
		        try{
		          selecionado = selecionado.parentElement.previousSibling.firstElementChild;
		        }catch(err){
		          selecionado = document.querySelector('.menu-busca .resultado-busca > ul li:last-child > a');
		        }
		        selecionado.focus();
		  }
	  };
	  
	  /**
	   * Checa se ha resultados para selecionar
	   * @return {Boolean}
	   */
	  this.podeSerSelecionado = function(){
		  return self.resultados.length > 0;
	  };
	  
	  /**
	   * Destaca o campo e o icone de busca ao entrar em foco
	   * @param {event} e
	   */
	  this.destacar = function(e){
		  var campoBusca = inputBusca.parentNode;

		  if(e.type == 'blur'){
			  campoBusca.classList.remove('ativo');
		  }else{
			  campoBusca.classList.add('ativo');
		  }
	  };
	  
	  /**
	   * @constructor
	   * Associa os eventos abrir e fechar tela de busca, buscar e selecionar resultado
	   */
	  this._init = function(){
	    inputBusca.addEventListener('keyup', self.buscar);
	    inputBusca.addEventListener('focus', self.destacar);
	    inputBusca.addEventListener('blur', self.destacar);
	    autocomplete.addEventListener('keyup', self.selecionarResultado);
	  };
	  
	  return self._init();
	};
	
	/**
	 * Classe de criacao de menu
	 * 
	 * @param {Object[]} nav
	 */
	function Menu(nav){
	  var self = this;
	  var pesquisa;
	  var submenus;
	  self.sidebar = document.querySelector('.nivel > ul');
	  self.botao = document.getElementsByClassName('botao-menu')[0];
	  self.menus = nav.Menu || {};
	  self.iconeVoltar = '';
	  
	  /**
	   * Cria menu e associa eventos de navegacao e busca
	   */
	  this.gerarMenu = function(){
		var menuHtml = self.gerarMenuItens(self.menus);
		if(self.sidebar){
			self.sidebar.insertAdjacentHTML('beforeend', menuHtml);
			new menuNavegacao(document.getElementById('menu'), self.botao);
			new Pesquisa(self.menus);
		}
	  };
	  
	  /**
	   * Verifica se existe JSON com menus disponiveis para criacao da navegacao
	   * @returns {boolean} 
	   */
	  this.checarMenusDisponiveis = function(){
		  if(JSON.stringify(self.menus) == '{}'){
			  self.removerBotaoMenu();
			  return false;
		  }
		  return true;
	  };
	  
	  /**
	   * Verifica se existe o botao do menu e remove
	   */
	  this.removerBotaoMenu = function(){
		  if(self.botao){
			  self.botao.remove();
		  }
	  };
	  
	  /**
	   * Gera recusivamente o html de listagem menus baseado em json de menus
	   * @param {Object[]} menusLista
	   * @param {string[]} iconeVoltar
	   * @returns {string} html
	   */
	  this.gerarMenuItens = function(menusLista){
	    var html = '';
	
	    menusLista.forEach(function(menu, i){
	      var temFilhos = self.possuiFilhos(menu);
	      var icone = self.gerarIcones(menu, temFilhos);
	
	      html += '<li><a href="'+menu.url+'">'+ icone.raiz +' '+ menu.nome +' '+icone.submenu+'</a>';
	      if(temFilhos){
	        html += self.criarSubmenu(menu.nome, menu.itens);
	      }
	      html += '</li>';
	    });
	    return html;
	  };
	
	  /**
	   * Gera painel de submenu com titulo e botao voltar
	   * @param {string} nome
	   * @param {Object[]} menuItens
	   * @return {string} submenu
	   */
	  this.criarSubmenu = function(nome, menuItens){
	    var submenu = '<div class="nivel">'
	                  +'<a class="btn-voltar" href="#"><i class="fa fa-caret-left"></i> '+self.iconeVoltar+' '+nome+'</a>'
	                  +'<ul>';
	    submenu += self.gerarMenuItens(menuItens);
	    submenu +='</ul></div>';
	    return submenu;
	  };
	  
	  /**
	   * Cria icones de menu e submenus
	   * @param {Object[]} menu
	   * @param {boolean} temFilhos
	   * @return {Object}
	   */
	  this.gerarIcones = function(menu, temFilhos){
		  var icone = {
			'raiz': (menu.icone)? '<i class="'+menu.icone+'"></i>': '',
			'submenu': temFilhos? '<i class="fa fa-angle-right"></i>': '',
		  };
	      self.iconeVoltar = (icone.raiz != '')? icone.raiz : self.iconeVoltar;
	      return icone;
	  };
	
	  /**
	   * Verifica se o menu possui submenus
	   * @param {Object[]} menu
	   * @returns {Boolean}
	   */
	  this.possuiFilhos = function(menu){
	    return (menu['itens'] && menu.itens.length > 0);
	  };
	  
	  /**
	   * Adiciona icones no menu raiz
	   */
	  this.adicionarIcones = function(){
		  var icone = {
				'painel': 'fa fa-desktop icone-nav',  
				'processo': 'fa fa-folder-open-o icone-nav',  
				'atividades': 'fa fa-pencil-square-o icone-nav',  
				'audi\u00EAnciasesess\u00F5es': 'far fa-calendar-alt icone-nav',  
				'configura\u00E7\u00E3o': 'fa fa-cog icone-nav',  
				'gest\u00E3o': 'fa fa-bar-chart icone-nav',
				'download' : 'fa fa-download icone-nav'
		  };
		  
		  self.menus.forEach(function(menu, i){
			  var titulo = menu.nome.replace(/\s/gi, '').toLowerCase();
			  self.menus[i]['icone'] = icone[titulo];
		  });
	  };
	
	  /**
	   * @constructor
	   * Dispara a construcao do menu;
	   */
	  this._init = function(){
		  if(self.checarMenusDisponiveis()){
			  self.adicionarIcones();
			  self.gerarMenu();
		  };
	  };
	  
	  return self._init();
	};
	
	/**
	 * @builder
	 * Define Menu como global 
	 * @param {Object[]} menus
	 */
	window.Menu = Menu;
})(window, jQuery_21);