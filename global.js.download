(function(window, $){
	"use strict";
	
	// Atalho abrir navegacao
	Mousetrap.bind('alt+1', function(){
		document.getElementsByClassName('botao-menu')[0].click();
	});
	
	// Atalho home-page
	Mousetrap.bind('alt+2', function(){
		document.getElementsByClassName('logo')[0].click();
	});
	
	// Atalho contraste
	Mousetrap.bind('alt+7', function(){
		document.getElementsByClassName('botao-contraste')[0].click();
	});
	
	// Atalho fale-conosco
	Mousetrap.bind('alt+8', function(){
		document.getElementsByClassName('botao-contato')[0].click();
	});
	
	// Atalho logout
	Mousetrap.bind('alt+9', function(){
		document.getElementsByClassName('botao-sair')[0].click();
	});

	/**
	 * Funcoes jQuery ao carregar a pagina
	 */
	$(document).ready(function(){
		//Cria tooltips
		$('.tip').tooltip();
		$('.tip-bottom').tooltip({placement: 'bottom'});
		$('.tip-left').tooltip({placement: 'left'});
		$('.tip-right').tooltip({placement: 'right'});
		
		//Atualiza tooltip de perfil do usuario
		var perfil = $('.form-control.perfil > option:selected').text();
		$('.nome-sobrenome').attr('title', perfil).tooltip('fixTitle');
		
		/**
		 * Toggle Header Retificar autuação
		 */
		
		$(".info span").on('click', function(){			 
		    $(".detalhesProcesso").slideToggle('fast');
		});
	});
	
})(window, jQuery_21);

/**
 * Exibe preloader
 */
function showLoading() {	
	if ($('_viewRoot:status')) {
		$('_viewRoot:status').style.display='none';
	}
	
	try{
		try{
			Richfaces.showModalPanel('modalStatus');
		}catch(e){
			console.warn('Preloading n\u00E3o foi incluido nessa p\u00E1gina');
			window.parent.Richfaces.showModalPanel('modalStatus');
		}
	}catch(e){
		console.warn(e);
	}
}

/**
 * Oculta preloader
 */
function hideLoading() {
	if ($('_viewRoot:status')) {
		$('_viewRoot:status').style.display='block';
	}

	try{
		try{
			Richfaces.hideModalPanel('modalStatus');
		}catch(e){
			console.warn('Preloading n\u00E3o foi incluido nessa p\u00E1gina');
			window.parent.Richfaces.hideModalPanel('modalStatus');
		}
	}catch(e){
		console.warn(e);
	}
}

/**
 * 
 */
function refreshOpener() {
	try {
	   opener.refreshPage();
	} catch (e) {}
}


/**
 * Plugin para limpar formulario
 */
if (! j$.fn.clearForm) {
	j$.fn.clearForm = function() {
		return this.each(function() {
			var type = this.type; 
			var tag = this.tagName.toLowerCase();
			if (tag == 'form')
				return j$(':input',this).clearForm();
			if (type == 'text' || type == 'password' || tag == 'textarea')
				this.value = '';
			else if (type == 'checkbox')
				this.checked = false;
			else if (type == 'radio' && this.id.endsWith('0'))
				this.checked = true;
			else if (tag == 'select')
				this.selectedIndex = 0;
		});
	}	
}

/**
 * Padronizacao das telas de popUps
 * @param {String} id
 * @param {String} url
 * @param {number} width
 * @param {number} height
 */
function openPopUp(id, url, width, height) {
	if (!width) width = window.screen.availWidth * 0.9;
	if (!height) height = window.screen.availHeight * 0.9;
	var featurePopUp = "width="+width + ", height="+height+", resizable=YES, scrollbars=YES, status=NO, location=NO";
	var popUp = window.open(url, id, featurePopUp);	
	popUp.moveTo(0, 0);
}

/**
 * Quebra de layout no paginador se a tela nao estiver maximizada
 * @param {String} id
 * @param {String} url
 */
function openPopUpMaximized(id, url) {
	var width = window.screen.availWidth;
	var height = window.screen.availHeight;
	var featurePopUp = "width="+width + ", height="+height+", fullscreen=YES resizable=YES, scrollbars=YES, status=NO, location=NO";
	var popUp = window.open(url, id, featurePopUp);
	popUp.moveTo(0, 0);
}

/**
 * Coloca o foco no campo
 * @param {Sring} campo
 */
function changeFocus(campo) {
    jQuery("*[id$=':"+campo+"']").focus();
}

/**
 * Colocar aqui o codigo correspondente na tabela ASCII do caracter que a validacao deve liberar.
 * @enum {number}
 */
var caracteresPermitidos ="49,50,51,52,53,54,55,56,57,48,32,97,98,99,"+
				"100,101,102,103,104,105,106,107,108,109,"+
				"110,111,112,113,114,115,116,117,118,119,"+
				"121,120,122,65,66,67,68,69,"+
				"70,71,72,73,74,75,76,77,78,79,"+
				"80,81,82,83,84,85,86,87,89,"+
				"88,90,225,233,237,243,250,193,"+
				"201,205,211,218,231,199,227,7869,"+
				"297,245,361,226,234,238,244,251,195,"+
				"7868,296,213,360,194,202,206,212,"+
				"219,47,47,123,125,91,93,45,95,43,"+
				"46,44,40,41,42,38,39,39,36,35,33,"+
				"37,60,62,63";
/**
 * 8370 - Simbolo Guarani
 * <input type="text" id="texto" onblur="return retiraCaracteresEspeciais(this);" /> 
 * @param {Object} 
 */
function retiraCaracteresEspeciais(obj){
	var texto = obj.value;
	
	if(texto.length == 0) return;

	for(i=texto.length-1; i>=0; i--){
		var codLetra = texto.charAt(i).charCodeAt();
		var letra = texto.charAt(i);
		
		if(caracteresPermitidos.indexOf(codLetra) == -1){
			obj.value = obj.value.replace(letra, "");
		}
	}
}

/**
 * Remove numeros e acentos da string
 * @param {String} v
 * @return {String} v
 */
function soAlfaNumEspBrancoAcent(v) {
	var regex = /[^a-z' 'A-Z0-9_\u00C0-\u00ff\u00AA\u00B0\u00BA.;:,]/g;
	v = v.replace(regex,"");
	return v;
};

/**
 * Remove tags em html
 * @param {Object} obj
 */
function removerTagHTML(obj){
	obj.value = soAlfaNumEspBrancoAcent(obj.value);
};

/**
 * Funcao responsavel em fazer o parser de uma string para mapa.
 * Exemplo:
 * var mapa = converterStringParaMapa("chave1=valor1;chave2=valor2", ";", "=")
 * @param {String} string String que ser convertida.
 * @param {String} separadorRegistro Separador de registros.
 * @param {String} separadorPar Separador entre chave/valor.
 * @returns {Object} Mapa.
 */
function converterStringParaMapa(string, separadorRegistro, separadorPar) {
	var mapa = new Object();
	
	if (string != null && separadorRegistro != null && separadorPar != null) {
		var registros = string.split(separadorRegistro);
		for (var indice = 0; indice < registros.length; indice++) {
			var chaveValor = registros[indice].split(separadorPar);
			if (chaveValor != null && chaveValor.length == 2) {
				var chave = unescape( chaveValor[0] );
				var valor = unescape( chaveValor[1] );
				valor = valor.replace(/\+/g, ' ');
				mapa[chave] = valor;
			}
		}
	}
	return mapa;
}

/**
 * Inicia o temporizador de download, o temporizador e usado para identificar quando um download foi 
 * concluido, ao finalizar o processamento do method binding e necessario registrar o cookie 
 * conforme nome/valor abaixo.
 * - "iniciarTemporizadorDownload=finalizado"
 */
var temporizadorDownload =  null;
function iniciarTemporizadorDownload() {
	showLoading();
	temporizadorDownload = window.setInterval(executarTemporizadorDownload, 1000);
}

/**
 * Finaliza o temporizador de download.
 * - Interrompe o temporizador javascript
 * - Remocao do cookie 'cookieTemporizadorDownload'.
 */
function finalizarTemporizadorDownload() {
	clearInterval(temporizadorDownload);
	excluirCookie("cookieTemporizadorDownload");
	temporizadorDownload= null;
	hideLoading();
}

/**
 * Funcao executada pelo temporizador do download.
 */
function executarTemporizadorDownload() {
	var cookieTemporizadorDownload = getValorCookie("cookieTemporizadorDownload");
	if (cookieTemporizadorDownload == "finalizado") {
		console.log("cookieTemporizadorDownload: download finalizado.");
		finalizarTemporizadorDownload();
		
		var callback = window.callbackTemporizadorDownload;
		if (callback != null) {
			eval("callbackTemporizadorDownload()");
		}
		hideLoading();
	} else {
		console.log("cookieTemporizadorDownload: em execu\u00E7\u00E3o.");
	}
}

/**
 * Retorna o valor do cookie passado por parametro.
 * 
 * @param {String} cname Nome do cookie.
 * @returns {String} valor do cookie.
 */
function getValorCookie(cname) {
	var resultado = null;
	var cookie = getCookie(cname);
	if (cookie != null) {
		resultado = cookie.substring(cname.length + 1, cookie.length);
	}
	return resultado;
}

/**
 * Retorna o cookie passado por parametro.
 * 
 * @param {String} cname Nome do cookie.
 * @returns cookie.
 */
function getCookie(cname) {
    var name = cname + "=";
    var ca = document.cookie.split(';');
    for(var i=0; i<ca.length; i++) {
        var c = ca[i];
        while (c.charAt(0)==' ') c = c.substring(1);
        if (c.indexOf(name) != -1) return c;
    }
    return null;
}

/**
 * Remove o cookie passado por parametro.
 * 
 * @param {String} nome Nome do cookie.
 */
function excluirCookie(nome) {
	console.log("Excluindo cookie: "+ nome);
    document.cookie = nome + '=;expires=Thu, 01 Jan 1970 00:00:01 GMT;';
};


/**
 * 
 * Extensao .contains() sem case sensitive
 *  
 * Somente para versão do jQuery 2.1
 */
jQuery_21.expr[":"].Contains = jQuery_21.expr.createPseudo(function(arg) {
    return function( elem ) {
    	var rExps=[
            {re: /[\xC0-\xC6]/g, ch: "A"},
            {re: /[\xE0-\xE6]/g, ch: "a"},
            {re: /[\xC8-\xCB]/g, ch: "E"},
            {re: /[\xE8-\xEB]/g, ch: "e"},
            {re: /[\xCC-\xCF]/g, ch: "I"},
            {re: /[\xEC-\xEF]/g, ch: "i"},
            {re: /[\xD2-\xD6]/g, ch: "O"},
            {re: /[\xF2-\xF6]/g, ch: "o"},
            {re: /[\xD9-\xDC]/g, ch: "U"},
            {re: /[\xF9-\xFC]/g, ch: "u"},
            {re: /[\xC7-\xE7]/g, ch: "c"},
            {re: /[\xD1]/g, ch: "N"},
            {re: /[\xF1]/g, ch: "n"}
        ];
    	
    	var element = jQuery_21(elem).text();
    	var search = arg;
    	
    	jQuery_21.each(rExps, function() {
    		element = element.replace(this.re, this.ch);
    		search = search.replace(this.re, this.ch);
        });
    	
    	
        return element.toUpperCase().indexOf(search.toUpperCase()) >= 0;
    };
});

/**
 * Remove mascaras do campo
 * @param {Object} obj
 */
function apenasNumeros(obj){
	var valor = obj.value;
	obj.value = valor.replace(/\D/g,"");
};

/**
 * Remove mascaras e numeros de um campo
 * @param {Object} obj
 */
function apenasTextos(obj){
	var valor = obj.value;
	obj.value = valor.replace(/(\W|\d)/g,"");
};

/**
 * Aplica mascara de CEP no campo
 * @param {Object} obj
 */
function apenasCEP(obj){
	apenasNumeros(obj);
	valor = obj.value;
	switch(valor.length){
		case 6:
			obj.value = valor.replace(/(\d)(\d{1})$/,"$1-$2");
			break;
		case 7:
			obj.value = valor.replace(/(\d)(\d{2})$/,"$1-$2");
			break;
		case 8:
			obj.value = valor.replace(/(\d)(\d{3})$/,"$1-$2");				
	}
}

/**
 * Exibe modal
 * @param {String} modalId
 */
function showModal(modalId) {
	setTimeout('Richfaces.showModalPanel("' + modalId + '")', 100);
}

/**
 * Oculta modal
 * @param {String} modalId
 */
function hideModal(modalId) {
	setTimeout('Richfaces.hideModalPanel("' + modalId + '")', 100);
} 


/**
 * Remove mascara de datas nao informadas
 * @param {String} digData
 */
function limparDataVazia(digData){
	var data = digData.value;
	if(data == '__/__/____'){
		digData.value = '';
	}
}

/**
 * Checa se as duas datas sao iguais
 * @param {String} dataInicial
 * @param {String} dataFinal
 */
function setMesmaData(dataInicial, dataFinal) {
	if( $(dataFinal).value == "" || $(dataFinal).value == null || $(dataFinal).value.startsWith("_") ) {
		$(dataFinal).value = $(dataInicial).value;
	}
} 

/**
 * Valida se a data inicial e anterior a data final
 * @param {String} dataInicial
 * @param {String} dataFinal
 * @param {String} mesmaData
 */
function validarPeriodo(idFromForm, idToForm, mesmaData) {	
	if (mesmaData) {
		setMesmaData(idFromForm, idToForm);
	}
	var timestampInicio = toDate($(idFromForm).value).getTime();
	var timestampFim = toDate($(idToForm).value).getTime();
	var validado = true;
	if (timestampInicio != null && timestampFim != null){
		if (timestampInicio > timestampFim){
			validado = false;
		} 
	} 
	if (!validado){		
		alert("A data inicial deve ser menor ou igual \u00E0 data final.");
		$(idFromForm).value = "";
		$(idToForm).value = "";
		$(idFromForm).focus();
	}
}


function validarTempo(hrs, min, seg){
	if ((hrs < 0) || (hrs > 23) || (min < 0) || (min > 59) || (seg < 0) || (seg > 59)){
		return false;
	}
	return true;
}

/**
 * Valida se a data inicial e anterior a data final
 * @param {String} dataInicial
 * @param {String} dataFinal
 * @param {String} mesmaData
 */
function validarPeriodoAnoMes(dataInicial, dataFinal, mesmaData) {
	if (mesmaData) {
		setMesmaData(dataInicial, dataFinal);
	}
	if (getDateFirstDayOfMonth($(dataInicial).value).getTime() > getDateLastDayOfMonth($(dataFinal).value).getTime()) {
		alert("A data inicial deve ser menor ou igual \u00E0 data final.");
		$(dataFinal).value = "";
	}
}

/**
 * Valida se a data informada e anterior a data atual
 * @param {String} data
 */
function validarDataMaxima(data) {
	if (getDateFirstDayOfMonth(data.value).getTime() > new Date().getTime() ) {
		alert("A data n\u00E3o pode ser superior \u00E0 data atual.");
		data.value = "";
	} 
}

/**
 * Converte String para Date
 * @param {String} string
 * @returns {Date}
 */
function toDate(string) {
	var dateRegex = /(\d{2})\/(\d{2})\/(\d{4})( (\d{2}):(\d{2}))*/g;
	var match = dateRegex.exec(string);
	if (typeof match[4] != 'undefined') {
		return new Date(match[3], match[2] - 1, match[1], match[5], match[6]);
	}
	return new Date(match[3], match[2] - 1, match[1]);
}

/**
 * Obtem o primeiro dia do mes
 * @param {String} string
 * @returns {Date}
 */
function getDateFirstDayOfMonth(string) {
	 data = string.split("/");
	 return new Date(data[1], data[0]-1, 1);
}

/**
 * Obtem o ultimo dia do mes
 * @param {String} string
 * @returns {Date}
 */
function getDateLastDayOfMonth(string){
	 data = string.split("/");
	 return new Date(data[1], data[0], 0);
}

/**
 * Validacao de data
 * @param {Object} campoData
 * @returns {Boolean}
 */
function validarDataPassada(campoData){
	if(toDate(campoData.value).getTime() > new Date().getTime()){
		alert('A data informada n\u00E3o pode ser maior que a data atual.');
		campoData.value = "";
		campoData.focus();
		return false;
	}
	return true;
}

/**
 * Valida data base de calculo
 * @param {Object} campoData
 * @returns {Boolean}
 */
function validarDataBaseCalculoRpv(campoData){
    var dataLimite = '01/07/1994';
	if(toDate(campoData.value).getTime() > new Date().getTime()){
		alert('A data informada n\u00E3o pode ser maior que a data atual.');
		campoData.value = "";
		campoData.focus();
		return false;
	}
	
	if(toDate(campoData.value).getTime() < toDate(dataLimite).getTime()){
		alert('A data informada n\u00E3o pode ser menor que 01/07/1994.');
		campoData.value = "";
		campoData.focus();
		return false;
	}
	return true;
}

/**
 * Validacao de data
 * @param {String} digData
 * @returns {Boolean}
 */
function validarData(digData) {
	var patternDMA = /^\d{2}[\/]\d{2}[\/]\d{4}$/;
    var patternMA = /^\d{2}[\/]\d{4}$/;
    var patternDMAHS = /^\d{2}[\/]\d{2}[\/]\d{4}[\s]\d{2}:\d{2}$/;
	var data = digData.value;
	if (data.replace(/[\:|_|\/]/g, "") == "") {
		return true;
	}
	var dia;
	var mes;
	var ano;
	var hora;
	var min;
	var usandoTimestamp = false;
    if (patternDMA.test(data)){
        dia = data.substr(0,2);
        mes = data.substr(3,2);
        ano = data.substr(6,4);
    } else if (patternMA.test(data)){
        dia = 1;
        mes = data.substr(0,2);
        ano = data.substr(3,4);
    } else if (patternDMAHS.test(data)){
    	dia = data.substr(0,2);
    	mes = data.substr(3,2);
    	ano = data.substr(6,4);
    	hora = data.substr(11,2);
    	min = data.substr(14,2);
    	usandoTimestamp = true;
    } else {
        alert("A data tem um formato inv\u00E1lido.");
        digData.value = "";
        return false;
    }
    if (!validarDataDMA(dia, mes, ano)) {
        alert("A data "+data+" \u00E9 inv\u00E1lida!");
        digData.value = "";
        return false;
    }
    if (usandoTimestamp && !validarTempo(hora, min, 0)){
        alert("O hor\u00E1rio "+hora+":"+min+" \u00E9 inv\u00E1lido!");
        digData.value = "";
        return false;    	
    }
}

/**
 * Validacao de data
 * @param {String} dia
 * @param {String} mes
 * @param {String} ano
 * @returns {Boolean}
 */
function validarDataDMA(dia, mes, ano) {
    if (ano > 1500){
	    switch (mes){
	        case '01':
	        case '03':
	        case '05':
	        case '07':
	        case '08':
	        case '10':
	        case '12':
	        if  (dia <= 31)
	            return true;
	        break;
	        case '04':              
	        case '06':
	        case '09':
	        case '11':
	        if  (dia <= 30) 
	            return true;
	        break;
	        case '02':
	            var bissexto = 0;
	            if ((ano % 4 == 0) || (ano % 100 == 0) || (ano % 400 == 0)) 
	                    bissexto = 1; 
	            if ((bissexto == 1) && (dia <= 29))
	                    return true;
	            if ((bissexto != 1) && (dia <= 28)) 
	                    return true; 
	            break;                                           
	    }
    }
    return false;
}

/**
 * Nao permite que o campo venha com valor zero 
 * @param {Object} obj
 */
function noZero(obj){
	if(obj.value != "" && obj.value == 0 ){
		alert("O valor tem de ser maior que zero.");
		obj.value = "";
		obj.focus();	
	}
}

/**
 * Validador de E-Mail
 * @param {Object} obj
 */
function validarEmail(obj) {
	var mail = obj.value;		
	var er = new RegExp(/^[A-Za-z0-9_\-\.]+@[A-Za-z0-9_\-\.]{2,}\.[A-Za-z0-9]{2,}(\.[A-Za-z0-9])?/);
	if(mail == "")return;
	if(!er.test(mail)){
		alert("Formato inv\u00E1lido do e-mail.");
		obj.value = "";
		obj.focus();
	}
} 

/**
 * Validador de CPF
 * @param {Object} obj
 */
function validarCpf(obj) {
	var cpf = obj.value;
	cpf = cpf.replace(/\D/g,"");
	
	if (cpf == ""){
		return;
	}
	var filtro = /^\d{11}$/;
	if (!filtro.test(cpf) || !isCpfValido(cpf)) {
		window.alert("CPF inv\u00E1lido.");
		obj.value = "";
		obj.focus();
	}
}

/**
 * Checa se o CPF e valido
 * @param {String} cpf
 * @returns {Boolean}
 */
function isCpfValido(cpf) {
	soma = 0;
	for (var i = 0; i < 9; i++)
		soma += parseInt(cpf.charAt(i)) * (10 - i);
	dv1 = 11 - (soma % 11);
	if (dv1 == 10 || dv1 == 11)
		dv1 = 0;
	if (dv1 != parseInt(cpf.charAt(9))) {
		return false;
	}
	soma = 0;
	for (var i = 0; i < 10; i++)
		soma += parseInt(cpf.charAt(i)) * (11 - i);
	dv2 = 11 - (soma % 11);
	if (dv2 == 10 || dv2 == 11)
		dv2 = 0;
	if (dv2 != parseInt(cpf.charAt(10))) {
		return false;
	}
	return true;
}

/**
 * Validador de CNPJ
 * @param {Object} obj
 */
function validarCnpj(obj) {
	var cnpj = obj.value;
	cnpj = cnpj.replace(/\D/g,"");
	
	if (cnpj == ""){
		return;
	}
	var filtro = /^\d{14}$/;
	if (!filtro.test(cnpj) || !isCnpjValido(cnpj)) {
		window.alert("CNPJ inv\u00E1lido.");
		obj.value = "";
		obj.focus();
	}
}

/**
 * Checa se o CNPJ e valido
 * @param {String} cnpj
 * @returns {Boolean}
 */
function isCnpjValido(cnpj) {
	soma = 0;
	for (var i = 0; i < 4; i++) {
		soma = soma + parseInt(cnpj.charAt(i)) * (5 - i);
	}
	for (var i = 4; i < 12; i++) {
		soma = soma + parseInt(cnpj.charAt(i)) * (13 - i);
	}
	dv1 = 11 - (soma % 11);
	if (dv1 >= 10) {
		dv1 = 0;
	}
	if (dv1 != parseInt(cnpj.charAt(12))) {
		return false;
	}
	soma = 0;
	for (i = 0; i < 5; i++) {
		soma = soma + parseInt(cnpj.charAt(i)) * (6 - i);
	}
	for (i = 5; i < 12; i++) {
		soma = soma + parseInt(cnpj.charAt(i)) * (14 - i);
	}
	soma = soma + dv1 * 2;
	dv2 = 11 - (soma % 11);
	if (dv2 >= 10) {
		dv2 = 0;
	}
	if (dv2 != parseInt(cnpj.charAt(13))) {
		return false;
	}
	return true;
}

/**
 * Usado pelo componente inputTextarea para contar e limitar o texto
 * @param {Object} obj e o campo do formulario
 * @param {String} max e o limite maximo do texto
 */
function counterTextarea(obj, max) {
	if (!max || max == '') return;
	typed = obj.nextElementSibling;
	typed.style.visibility = "visible";
	var maxlength = parseInt(max);					  			
	if(obj.value.length > maxlength) {
		obj.value = obj.value.substring(0, maxlength);
	}
	typed.innerHTML = "( " + obj.value.length + " / " + maxlength +" )";
}

/**
 * Limpa espaco em branco
 * @param {String} str
 * @returns {String}
 */
function limparEspacoBranco(str){
	str=str.replace(/\s+/g, " ");
	str=str.replace(/^ /, "");
	str=str.replace(/ $/, "");
	return str;
}

/**
 * Remove caracter especial
 * @param {Object} obj
 */
function removeCaracterEspecial(obj){
	if(obj != null){
		var texto = "";
		var aux = obj.value;
		var parts = aux.split("");										
		for (var i = 0; parts.length > i ; i++){						
			if(parts[i].charCodeAt(0) < 256){
				texto += parts[i];
			}	
		}
		obj.value = texto;
	}
}

/**
 * Verifica se o numero tem 0 ou 8 ou 9 digitos. Se nao tiver, dispara msg de alerta
 * @param {Object} campoTelefone e o campo do formulario
 */
function validarTelefone(campoTelefone){
	apenasNumeros(campoTelefone);
	
	var numero = campoTelefone.value;
	
	if(numero.length > 0 && (numero.length < 8 || numero.length > 9) ){
		window.alert(numero + ' \u00E9 um n\u00FAmero de telefone inv\u00E1lido.');
		campoTelefone.focus();
	}
}

/**
 * Limpa o ddd vazio - [PJEII-3962]
 * @param {Object} digDdd
 */
function limparDddVazio(digDdd){
	var ddd = digDdd.value;
	if(ddd == '__'){
		digDdd.value = '';
	}
}

/**
 * Valida faixa monetaria
 * @param {String} dataInicial
 * @param {String} dataFinal
 */
function validarFaixaMonetaria(dataInicial, dataFinal){
	var dtInicial = $(dataInicial).value;
	dtInicial = Number(dtInicial.replace(",", "."));
	var dtFinal = $(dataFinal).value;
	dtFinal = Number(dtFinal.replace(",", "."));
	
	if (dtInicial != "" && dtFinal != "" && dtInicial > dtFinal) {
		alert("O valor inicial deve ser menor ou igual ao valor final.");
		$(dataInicial).value = "";
		$(dataFinal).value = "";
	}
}

/**
 * Cria mascara de data
 * usar em onkeyup(oninputkeyup no rich:calendar) 
 * @param {Object} campoData
 */
function mascaraData(campoData){
    v = campoData.value;
    v=v.replace(/\D/g,""); 
    v=v.replace(/(\d{2})(\d)/,"$1/$2"); 
    v=v.replace(/(\d{2})(\d)/,"$1/$2");
    if(v.length > 10){
		v = v.substring(0,10);
    }
    campoData.value = v;
}

function mascaraDataHora(campoDataHora){
    v = campoDataHora.value;
    v=v.replace(/\D/g,""); 
    v=v.replace(/(\d{2})(\d)/,"$1/$2");
    v=v.replace(/(\d{2})(\d)/,"$1/$2");
    v=v.replace(/(\d{4})(\d)/,"$1 $2");
    v=v.replace(/(\s\d{2})(\d)/,"$1:$2");
    if(v.length > 16){
		v = v.substring(0,15);
    }
    campoDataHora.value = v;
}

/**
 * Ajusta exibicao de item do componente de arvore (tree.xhtml)
 * @param {string} id
 */
function setZIndex(id) {
	$(id).style.zIndex = $(id).offsetHeight > 30 ? 1 : 0;
}

/**
 * Altera perfil do usuario
 */
function trocarPerfil(){
	defaultTarefa();
	refreshTarefaTree();
}

/**
 * Resolucao de conflitos
 * Reseta a versao padrao do jQuery para 1.3.2
 */
jQuery = jQuery_13;


var ncolor = 0;
var chartmap = new Object();
function createCanvas(chartdiv){
	var cv = document.createElement("canvas");
	cv.id = chartdiv + "cv";
	cv.width = "80";
	cv.height = "80";
	document.getElementById(chartdiv).appendChild(cv);
	return cv;
}

var cores=["#1C75AA","#AA0D12","#501193","#63B8FF","#CD6090",
			"#B03060","#09AA0F","#B22222","#CD853F","#BC8F8F",
			"#CD5C5C","#21C3C7","#0DDA41","#B3EE3A","#C9C667",
			"#FFA500","#8B5A00","#FF7256","#8B3626","#94200F",
			"#EDC11C","#AB82FF","#715C0D","#FF9066","#15B79D",
			"#90B715","#B72573","#C72785","#E35B98","#16C159",
			"#5D750D"];

function nextcolor(){
	var i=ncolor % cores.length;
	ncolor=ncolor + 1;
	return cores[i];
};
	
function desenharGrafico(chartdiv, gdata){
	ncolor = 0;
	ncolor = 0;
	var mvc = document.getElementById(chartdiv + "cv");
	if(!mvc){
		createCanvas(chartdiv);
	}
	var ctxv = document.getElementById(chartdiv + "cv").getContext("2d");
	var vchart = new Chart(ctxv).Pie(gdata,{animation: false});
};
function desenhar(){
	for(var c in chartmap){
		desenharGrafico(c, chartmap[c]);	
	}
};

function toggleButton(botao){
	if (jQuery(botao).hasClass('toggleButton')){
		jQuery(botao).removeClass('toggleButton');
		jQuery(botao).addClass('toggleButtonDown');
	} else {
		jQuery(botao).removeClass('toggleButtonDown');
		jQuery(botao).addClass('toggleButton');					  
	}
}

function toggleClassHeader(coluna){
	if (jQuery(coluna).hasClass('activeHeader')){
		jQuery(coluna).removeClass('activeHeader');
		jQuery(coluna).addClass('rich-table-headercell');
	} else {
		jQuery(coluna).removeClass('rich-table-headercell');
		jQuery(coluna).addClass('activeHeader');					  
	}	
}

function copyToClipboard(event, text) {
	var tempField = jQuery('<input />');
	jQuery('body').append(tempField);
	tempField.val(text).select();
	document.execCommand('copy');
	tempField.remove();
	event.stopPropagation();
}

function reducePolyfill(){
	Array.prototype.reduce = function(callback /*, valorInicial*/) {
	    'use strict';
	    if (this == null) {
	      throw new TypeError('Array.prototype.reduce chamado é nulo (null) ou indefinido (undefined)');
	    }
	    if (typeof callback !== 'function') {
	      throw new TypeError(callback + ' não é uma função')
	    }
	    var t = Object(this), len = t.length >>> 0, k = 0, value;
	    if (arguments.length == 2) {
	      value = arguments[1];
	    } else {
	      while (k < len && !(k in t)) {
	        k++; 
	      }
	      if (k >= len) {
	        throw new TypeError('Reduce possui um array vazio sem um valor inicial');
	      }
	      value = t[k++];
	    }
	    for (; k < len; k++) {
	      if (k in t) {
	        value = callback(value, t[k], k, t);
	      }
	    }
	    return value;
	}; 
}

//** ROTINAS USADAS NAS TELAS QUE TEM O CAMPO DE CONSULTA POR NÚMERO DO PROCESSO
function ativaQuebraNumeroProcesso(idNumeroSequencial, idNumeroDigitoVerificador, idAno, idNumeroOrgaoJustica) {
	
	let inputNumSeq = document.getElementById(idNumeroSequencial);
	let inputNumDig = document.getElementById(idNumeroDigitoVerificador);
	let inputNumAno = document.getElementById(idAno);
	let inputNumOrg = document.getElementById(idNumeroOrgaoJustica);
	let inputs = [inputNumSeq, inputNumDig, inputNumAno, inputNumOrg];
	
	for (let i=0; i<inputs.length; i++) {
		inputs[i].addEventListener("keyup", function () {
			apenasNumeros(inputs[i]);
			if (i==0) {
				if (inputNumSeq.value.length == 7) {
					inputNumDig.focus();
				}
			}
			else {
				if ((i==1 || i==2) && inputs[i].value.length==inputs[i].maxLength) {
					inputs[i + 1].focus();
				}
			}
		});
		
	}
	
	inputNumSeq.addEventListener("paste", function () {
		setTimeout(function () {quebraNumeroProcesso();},100);
	});
	inputNumSeq.addEventListener("keyup", function () {
		quebraNumeroProcesso()
	});
	
	function quebraNumeroProcesso() {
		let numeroProcesso = inputNumSeq.value;
		numeroProcesso = numeroProcesso.replace(".", "").replace("-", "");
		if (numeroProcesso.length == 20 && !isNaN(numeroProcesso)) {
			inputNumSeq.value = numeroProcesso.substring(0,7);
			inputNumDig.value = numeroProcesso.substring(7,9);
			inputNumAno.value = numeroProcesso.substring(9,13);
			inputNumOrg.value = numeroProcesso.substring(16,20);
			inputNumOrg.focus();
		}
	}
}

